ANSI-C/cC++ Compiler for HC12 V-5.0.30 Build 6037, Feb  7 2006

    1:  /***********************************************************************************
    2:  
    3:    York University CSE3215
    4:    Main.c
    5:    Jan 09, 2006
    6:    
    7:  ***********************************************************************************/
    8:  #include <hidef.h>            /* common defines and macros */
    9:  #include <mc9s12dp256.h>      /* MicroController derivative information */
   10:  
   11:  #pragma LINK_INFO DERIVATIVE "mc9s12dp256b"
   12:  
   13:  
   14:  static unsigned int rtiCnt;        /* to count number of RTIs */
   15:  static unsigned char max_8 = 0b11111111;
   16:  
   17:  static unsigned char voltage;
   18:  static unsigned char temp;
   19:  
   20:  static unsigned char set_point_voltage;
   21:  static unsigned char set_point_temp;
   22:  
   23:  static char num_display_updates = 10;
   24:  
   25:  
   26:  // digit array to display numbers (and .) on 7-segment LED
   27:  byte numbers[11] = {
   28:  0x3F, // 0 
   29:  0x06, // 1
   30:  0x5B, // 2
   31:  0x4F, // 3
   32:  0x66, // 4
   33:  0x6D, // 5
   34:  0x7D, // 6
   35:  0x07, // 7
   36:  0x7F, // 8
   37:  0x6F, // 9
   38:  0x80  // .
   39:  };
   40:  
   41:  __interrupt void RealTimeInterrupt(void)
   42:  {

Function: RealTimeInterrupt
Source  : Z:\3215\Lab5\Sources\main.c
Options : -BfaGapLimitBits-1 -D_HCS12 -D_HCS12_SERIALMON -Env"GENPATH=Z:\3215\Lab5;Z:\3215\Lab5\bin;Z:\3215\Lab5\prm;Z:\3215\Lab5\cmd;Z:\3215\Lab5\Sources;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\lib;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\src;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\include" -EnvOBJPATH=Z:\3215\Lab5\bin -EnvTEXTPATH=Z:\3215\Lab5\bin -Lasm=%n.lst -Ms -ObjN=Z:\3215\Lab5\Lab5_Data\Monitor\ObjectCode\main.c.o -WmsgSd1106

   43:    rtiCnt++;                    // increment the counter       
  0000 fe0000       [3]     LDX   rtiCnt
  0003 08           [1]     INX   
  0004 7e0000       [3]     STX   rtiCnt
   44:    CRGFLG = 0x80;               // clear rti flag               
  0007 c680         [1]     LDAB  #128
  0009 5b00         [2]     STAB  _CRGFLG
   45:  }
  000b 0b           [8]     RTI   
   46:  
   47:  __interrupt void conversion_complete(void) 
   48:  {

Function: conversion_complete
Source  : Z:\3215\Lab5\Sources\main.c
Options : -BfaGapLimitBits-1 -D_HCS12 -D_HCS12_SERIALMON -Env"GENPATH=Z:\3215\Lab5;Z:\3215\Lab5\bin;Z:\3215\Lab5\prm;Z:\3215\Lab5\cmd;Z:\3215\Lab5\Sources;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\lib;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\src;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\include" -EnvOBJPATH=Z:\3215\Lab5\bin -EnvTEXTPATH=Z:\3215\Lab5\bin -Lasm=%n.lst -Ms -ObjN=Z:\3215\Lab5\Lab5_Data\Monitor\ObjectCode\main.c.o -WmsgSd1106

   49:  /*
   50:     set_point_voltage =  (char) ((0b00000101 * ATD0DR0H) / max_8);
   51:     set_point_temp = set_point_voltage / 0b00001010;
   52:     
   53:     PORTB = numbers[set_point_voltage % 0b00001010];               
   54:     PTP = 0x0D;
   55:              
   56:     ATD0CTL5 = 0xA6; // read Analog signals from channel 6 again  
   57:     */
   58:  }
  0000 0b           [8]     RTI   
   59:  
   60:  
   61:  void main(void)
   62:  { 

Function: main
Source  : Z:\3215\Lab5\Sources\main.c
Options : -BfaGapLimitBits-1 -D_HCS12 -D_HCS12_SERIALMON -Env"GENPATH=Z:\3215\Lab5;Z:\3215\Lab5\bin;Z:\3215\Lab5\prm;Z:\3215\Lab5\cmd;Z:\3215\Lab5\Sources;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\lib;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\src;C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\include" -Env"LIBPATH=C:\Program Files\Freescale\CW for HC12 V4.5\lib\HC12c\include" -EnvOBJPATH=Z:\3215\Lab5\bin -EnvTEXTPATH=Z:\3215\Lab5\bin -Lasm=%n.lst -Ms -ObjN=Z:\3215\Lab5\Lab5_Data\Monitor\ObjectCode\main.c.o -WmsgSd1106

   63:     DDRB = 0xFF;   
  0000 cc80ff       [2]     LDD   #33023
  0003 5b00         [2]     STAB  _DDRAB:1
   64:  
   65:    // Step 1:  
   66:    ATD0CTL2 = 0x80; // Power up A/D (|= 0x02 enables interrupt of ATD conversion sequence)
  0005 5a00         [2]     STAA  _ATD0CTL23
   67:    ATD0CTL3 = 0x40; // Eight conversions
  0007 44           [1]     LSRA  
  0008 5a00         [2]     STAA  _ATD0CTL23:1
   68:    ATD0CTL4 = 0x82; // 8-bit mode, 3MHz ATD conversion clock (could interrupt here)
  000a c682         [1]     LDAB  #130
  000c 5b00         [2]     STAB  _ATD0CTL45
   69:    ATD0CTL5 = 0x27;    /* 1 0 1 0 0 1 1 0
  000e c627         [1]     LDAB  #39
  0010 5b00         [2]     STAB  _ATD0CTL45:1
   70:                                     \___/
   71:                                      |
   72:                                      |
   73:                                       \_ Channel 6 of Port AD
   74:                                     
   75:                      */
   76:    // results from analog input are stored in (16-bit) ATD0DR0
   77:   
   78:   
   79:   // Convert digital code from ATD0DR0 into Voltage then into Degrees (C)
   80:   //  actual_voltage = (44*ATD0DR0)/(0b1111111111)
   81:   //  acutal_temp = actual_voltage / 0b1010;
   82:          
   83:    // Step 2:
   84:    
   85:    // enable PWM channel 7 output
   86:    PWME_PWME7 = 1;
  0012 4c0080       [4]     BSET  _PWME,#128
   87:    
   88:    // assign PWM channel 7 to use clock SB
   89:    PWMCLK_PCLK7 = 1;
  0015 4c0080       [4]     BSET  _PWMCLK,#128
   90:    
   91:    PWMPRCLK = 0x70; //prescale clock B by 128 (B = B / 128 = 24MHz / 128 = 187.5 KHz)       
  0018 c670         [1]     LDAB  #112
  001a 5b00         [2]     STAB  _PWMPRCLK
   92:  
   93:    PWMSCLB = 0; // PWMSCLB = 0 => SB = B / 512 => 187.5 KHz / 512 = 366.2 Hz
  001c 790000       [3]     CLR   _PWMSCLB
   94:                 // Period = 1 / 366.2 Hz = 2.7 ms
   95:    
   96:    PWMPER7 = 3; // PWM Channel 7 period = (2.7ms * 3) = 8.2 ms
  001f c603         [1]     LDAB  #3
  0021 5b00         [2]     STAB  _PWMPER67:1
   97:  
   98:    //PWMDTY7 = 0; // PWM duty cycle = (PWMPER7-PWMDTY7)/PWMPER7 * 100%
   99:  
  100:  
  101:  
  102:  
  103:  
  104:    // Set up RTI ms counter here    
  105:    RTICTL = 0x31;            // (2*2^12)/(4x10^6) = 2.048 ms per RTI
  0023 c631         [1]     LDAB  #49
  0025 5b00         [2]     STAB  _RTICTL
  106:    CRGINT |= 0x80;            // enable RTI interrupt
  0027 4c0080       [4]     BSET  _CRGINT,#128
  107:    rtiCnt = 0;                // RTI counter to 0 
  002a c7           [1]     CLRB  
  002b 87           [1]     CLRA  
  002c 7c0000       [3]     STD   rtiCnt
  108:        
  109:      
  110:    EnableInterrupts;
  002f 10ef         [1]     CLI   
  111:    
  112:    for(;;)
  0031 2067         [3]     BRA   *+105 ;abs = 009a
  113:    {    
  114:      // 1) check AD registers every 10 ms
  115:      // 2) after x ms, initiate ATD conversion on channel 7 (input from VR2), and interrupt 
  116:      // upon completion
  117:      if (rtiCnt == 5) 
  0033 fc0000       [3]     LDD   rtiCnt
  0036 8c0005       [2]     CPD   #5
  0039 265f         [3/1]   BNE   *+97 ;abs = 009a
  118:      {    
  119:            num_display_updates++;
  003b 720000       [4]     INC   num_display_updates
  120:            
  121:            voltage =  (char) ((0b00000101 * ATD0DR0H) / max_8);
  003e d600         [3]     LDAB  _ATD0DR0
  0040 37           [2]     PSHB  
  0041 c605         [1]     LDAB  #5
  0043 32           [3]     PULA  
  0044 12           [1]     MUL   
  0045 3b           [2]     PSHD  
  0046 f60000       [3]     LDAB  max_8
  0049 87           [1]     CLRA  
  004a b745         [1]     TFR   D,X
  004c 3a           [3]     PULD  
  004d 1815         [12]    IDIVS 
  004f b751         [1]     TFR   X,B
  0051 7b0000       [3]     STAB  voltage
  122:            temp = voltage / 0b00001010;
  0054 860a         [1]     LDAA  #10
  0056 160000       [4]     JSR   _BDIVMODU
  0059 7a0000       [3]     STAA  temp
  123:  
  124:            
  125:            // update display of actual temperature
  126:            rtiCnt = 0;
  005c c7           [1]     CLRB  
  005d 87           [1]     CLRA  
  005e 7c0000       [3]     STD   rtiCnt
  127:            while (rtiCnt <= 2);
  0061 fc0000       [3]     LDD   rtiCnt
  0064 8c0002       [2]     CPD   #2
  0067 23f8         [3/1]   BLS   *-6 ;abs = 0061
  128:  
  129:            PORTB = numbers[voltage % 0b00001010];
  0069 0731         [4]     BSR   *+51 ;abs = 009c
  006b ce0000       [2]     LDX   #numbers
  006e a6e5         [3]     LDAA  B,X
  0070 5a00         [2]     STAA  _PORTAB:1
  130:            PTP = 0x07;         
  0072 c607         [1]     LDAB  #7
  0074 7b0000       [3]     STAB  _PTP
  131:            
  132:            rtiCnt = 0;
  0077 c7           [1]     CLRB  
  0078 87           [1]     CLRA  
  0079 7c0000       [3]     STD   rtiCnt
  133:            while (rtiCnt <= 2);
  007c fc0000       [3]     LDD   rtiCnt
  007f 8c0002       [2]     CPD   #2
  0082 23f8         [3/1]   BLS   *-6 ;abs = 007c
  134:  
  135:            PORTB = numbers[(voltage/0b00001010) % 0b00001010];
  0084 0716         [4]     BSR   *+24 ;abs = 009c
  0086 b701         [1]     TFR   A,B
  0088 860a         [1]     LDAA  #10
  008a 160000       [4]     JSR   _BDIVMODS
  008d b715         [1]     SEX   B,X
  008f e6e20000     [4]     LDAB  numbers,X
  0093 5b00         [2]     STAB  _PORTAB:1
  136:            PTP = 0x0B;                                        
  0095 c60b         [1]     LDAB  #11
  0097 7b0000       [3]     STAB  _PTP
  137:            
  138:            
  139:             /*
  140:            if (num_display_updates == 10) 
  141:            {
  142:              ATD0CTL5 = 0xA7;  // sample from ATD channel 7 (input from VR2)
  143:              ATD0CTL2 |= 0x02; // enable conversion sequence interrupt
  144:              
  145:              num_display_updates = 0; 
  146:                                      
  147:              while (!ATD0STAT0_SCF); // wait until conversion sequence is complete
  148:                                      // and determine value at channel 7                                                                                                                 
  149:            }
  150:            */
  151:      }                    
  152:    }
  009a 2097         [3]     BRA   *-103 ;abs = 0033
  009c f60000       [3]     LDAB  voltage
  009f 860a         [1]     LDAA  #10
  00a1 060000       [3]     JMP   _BDIVMODU
  153:  }
  154:  
